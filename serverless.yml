org: tonyhsieh
app: aws-api
service: aws-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  deploymentMethod: direct
  environment:
    DYNAMODB_MOJO_TABLE: ${self:service}-mojoTable-${sls:stage}
    DYNAMODB_MODABLEMOJO_TABLE: ${self:service}-modablemojoTable-${sls:stage}
    DYNAMODB_MODABLEMOJO_OLD_TABLE: ${self:service}-modablemojoOldTable-${sls:stage}
    DYNAMODB_MODABLEMOJO_NUMBER_TABLE: ${self:service}-modablemojoNumberTable-${sls:stage}
    DYNAMODB_WHITELIST_TABLE: ${self:service}-whitelistTable-${sls:stage}
    DYNAMODB_CLAIM_TABLE: ${self:service}-claimTable-${sls:stage}
    S3_PLANETMOJO_IMAGES: planetmojo-images-${sls:stage}
    DYNAMODB_CHAMPION_TABLE: ${self:service}-championTable-${sls:stage}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:Get*"
        - "dynamodb:Scan*"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: 
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-mojoTable-${sls:stage}
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-mojoTable-${sls:stage}/index/*
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-modablemojoTable-${sls:stage}
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-modablemojoTable-${sls:stage}/index/*
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-modablemojoOldTable-${sls:stage}
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-modablemojoOldTable-${sls:stage}/index/*
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-modablemojoNumberTable-${sls:stage}
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-modablemojoNumberTable-${sls:stage}/index/*
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-whitelistTable-${sls:stage}
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-whitelistTable-${sls:stage}/index/*
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-claimTable-${sls:stage}
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-claimTable-${sls:stage}/index/*
        - arn:aws:s3:::planetmojo-images-${sls:stage}/*
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-championTable-${sls:stage}

package:
  excludeDevDependencies: true  
  exclude:
    - node_modules/**
    - venv/**

functions:
  getMojo: 
    handler: mojo.getMojo
    events:
      - httpApi:
          path: /mojo/metadata/{id}
          method: get
  getMojos: 
    handler: mojo.getMojos
    events:
      - httpApi:
          path: /mojos/metadata
          method: post
  getMojoPfp: 
    handler: mojo.getMojoPfp
    events:
      - httpApi:
          path: /mojo/pfp/{id}
          method: get
  updateMojo: 
    handler: mojo.updateMojo
    events:
      - httpApi:
          path: /mojo/action/update
          method: post
            #  clearMojoGameStats: 
            #    handler: mojo.clearMojoGameStats
            #    events:
            #      - httpApi:
            #          path: /mojo/action/clear/{id}
            #          method: put
  getModableMojo: 
    handler: mojo.getModableMojoOld
    events:
      - httpApi:
          path: /mod-able-mojo/metadata/{id}
          method: get
  getModableMojoNew: 
    handler: mojo.getModableMojo
    events:
      - httpApi:
          path: /mod-able-mojo/metadata/v2/{id}
          method: get
  getModableMojosNew: 
    handler: mojo.getModableMojos
    events:
      - httpApi:
          path: /mod-able-mojos/metadata/v2
          method: post
  getModableMojoHash: 
    handler: mojo.getModableMojoHash
    events:
      - httpApi:
          path: /mod-able-mojo/hash/v2/{number}
          method: get
  mintPrepModableMojo: 
    handler: mojo.mintPrepModableMojo
    events:
      - httpApi:
          path: /mod-able-mojo/action/mintPrep
          method: post 
            #  mintPrepModableMojoNotSecure: 
            #    handler: mojo.mintPrepModableMojo
            #    events:
            #      - httpApi:
            #          path: /mod-able-mojo/action/mintPrepNotSecure
            #          method: post 
  updateModableMojo: 
    handler: mojo.updateModableMojo
    events:
      - httpApi:
          path: /mod-able-mojo/action/update
          method: post 
            #  updateModableMojoNotSecure: 
            #    handler: mojo.updateModableMojo
            #    events:
            #      - httpApi:
            #          path: /mod-able-mojo/action/updateNotSecure
            #          method: post 
  getMojoSeed: 
    handler: mojoSeed.getMojoSeed
    events:
      - httpApi:
          path: /moj-seed/metadata/{id}
          method: get
  sproutMojoSeed:
    handler: mojoSeed.sproutMojoSeed
    events:
      - httpApi:
          path: /moj-seed/action/sprout/{id}
          method: put 
  claimMojoSeed: 
    handler: mojoSeed.claimMojoSeed
    events:
      - httpApi:
          path: /moj-seed/action/claim/{addr}
          method: get
  plantTree:
    handler: mojoSeed.plantTree
    events:
      - httpApi:
          path: /moj-seed/action/plantTree/{addr}/{treeLocation}
          method: put 
  getMoviePoster: 
    handler: mojoSeed.getMoviePoster
    events:
      - httpApi:
          path: /collectible/movie-poster/metadata/{id}
          method: get
  claimCollectible: 
    handler: mojoSeed.claimCollectible
    events:
      - httpApi:
          path: /collectible/action/claim/{addr}
          method: get
  getVIPplaytestPass: 
    handler: mojoSeed.getVIPplaytestPass
    events:
      - httpApi:
          path: /collectible/vip-playtest-pass/metadata/{id}
          method: get
  getChampion: 
    handler: champion.getChampion
    events:
      - httpApi:
          path: /champion/metadata/{id}
          method: get
  unboxChampion: 
    handler: champion.unboxChampion
    events:
      - httpApi:
          path: /champion/action/unbox/{id}
          method: put
  getChampions: 
    handler: champion.getChampions
    events:
      - httpApi:
          path: /champions/metadata
          method: post
  getGoldenMojo: 
    handler: mojoSeed.getGoldenMojo
    events:
      - httpApi:
          path: /collectible/golden-mojo/metadata/{id}
          method: get
  getChampionChest: 
    handler: mojoSeed.getChampionChest
    events:
      - httpApi:
          path: /collectible/champion-chest/metadata/{id}
          method: get
  getBetaChest: 
    handler: mojoSeed.getBetaChest
    events:
      - httpApi:
          path: /collectible/beta-chest/metadata/{id}
          method: get
  createChampion: 
    handler: champion.createChampion
    events:
      - httpApi:
          path: /champion/action/create
          method: post
            #  createChampionNotSecure: 
            #    handler: champion.createChampion
            #    events:
            #      - httpApi:
            #          path: /champion/action/createNotSecure
            #          method: post
  updateChampion: 
    handler: champion.updateChampion
    events:
      - httpApi:
          path: /champion/action/update
          method: post


resources:
  Resources:
    MojoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        TableName: ${self:service}-mojoTable-${sls:stage}
    ModAbleMojoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        TableName: ${self:service}-modablemojoTable-${sls:stage}
    ModAbleMojoOldTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        TableName: ${self:service}-modablemojoOldTable-${sls:stage}
    ModAbleMojoNumberTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: number 
            AttributeType: N 
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: number 
            KeyType: HASH
        TableName: ${self:service}-modablemojoNumberTable-${sls:stage}
    WhitelistTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: walletKey
            AttributeType: S
          - AttributeName: saleKey
            AttributeType: S
          - AttributeName: walletOrder
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: walletKey
            KeyType: HASH
          - AttributeName: saleKey
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: saleKey-index
            KeySchema:
            - AttributeName: saleKey
              KeyType: HASH
            - AttributeName: walletOrder
              KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - walletId
        TableName: ${self:service}-whitelistTable-${sls:stage}
    ClaimTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: PK 
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: PK 
            KeyType: HASH
          - AttributeName: SK 
            KeyType: RANGE
        TableName: ${self:service}-claimTable-${sls:stage}
    ChampionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        TableName: ${self:service}-championTable-${sls:stage}

plugins:
  - serverless-offline
  - serverless-plugin-include-dependencies
  - serverless-dotenv-plugin
  - serverless-esbuild

custom:
  esbuild:
    bundle: true
    minify: true
    #sourcemap: true
    exclude: 'aws-sdk'
    target: node16
    #define:
    #  'require.resolve': undefined
    platform: node
    concurrency: 10
