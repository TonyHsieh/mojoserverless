console: true 
org: tonyhsieh
app: aws-api
service: aws-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  deploymentMethod: direct
  environment:
    DYNAMODB_MOJO_TABLE: ${self:service}-mojoTable-${sls:stage}
    DYNAMODB_WHITELIST_TABLE: ${self:service}-whitelistTable-${sls:stage}
    DYNAMODB_CLAIM_TABLE: ${self:service}-claimTable-${sls:stage}
    S3_PLANETMOJO_IMAGES: planetmojo-images-${sls:stage}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:Get*"
        - "dynamodb:Scan*"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: 
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-mojoTable-${sls:stage}
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-mojoTable-${sls:stage}/index/*
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-whitelistTable-${sls:stage}
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-whitelistTable-${sls:stage}/index/*
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-claimTable-${sls:stage}
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-claimTable-${sls:stage}/index/*
        - arn:aws:s3:::planetmojo-images-${sls:stage}/*

package:
  excludeDevDependencies: true  
  exclude:
    - node_modules/**
    - venv/**

functions:
  getMojo: 
    handler: mojo.getMojo
    events:
      - httpApi:
          path: /mojo/metadata/{id}
          method: get
  getMojoOpensea: 
    handler: mojo.getMojoOpensea
    events:
      - httpApi:
          path: /mojo/opensea/{id}
          method: get
  getMojoPfp: 
    handler: mojo.getMojoPfp
    events:
      - httpApi:
          path: /mojo/pfp/{id}
          method: get
  getMojoSeed: 
    handler: mojoSeed.getMojoSeed
    events:
      - httpApi:
          path: /moj-seed/metadata/{id}
          method: get
  sproutMojoSeed:
    handler: mojoSeed.sproutMojoSeed
    events:
      - httpApi:
          path: /moj-seed/action/sprout/{id}
          method: put 
  claimMojoSeed: 
    handler: mojoSeed.claimMojoSeed
    events:
      - httpApi:
          path: /moj-seed/action/claim/{addr}
          method: get
  plantTree:
    handler: mojoSeed.plantTree
    events:
      - httpApi:
          path: /moj-seed/action/plantTree/{addr}/{treeLocation}
          method: put 
  claimPosterNFT: 
    handler: mojoSeed.claimPosterNFT
    events:
      - httpApi:
          path: /posterNFT/action/claim/{addr}
          method: get

          #getMojos: 
          #  handler: getMojos.getMojos
          #  events:
          #    - httpApi:
          #        path: /mojos
          #        method: get
          #testCopy: 
          #  handler: mojoSeed.testCopy
          #  events:
          #    - httpApi:
          #        path: /testCopy/{id}
          #        method: get


resources:
  Resources:
    MojoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        TableName: ${self:service}-mojoTable-${sls:stage}
    WhitelistTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: walletKey
            AttributeType: S
          - AttributeName: saleKey
            AttributeType: S
          - AttributeName: walletOrder
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: walletKey
            KeyType: HASH
          - AttributeName: saleKey
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: saleKey-index
            KeySchema:
            - AttributeName: saleKey
              KeyType: HASH
            - AttributeName: walletOrder
              KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - walletId
        TableName: ${self:service}-whitelistTable-${sls:stage}
    ClaimTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: PK 
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: PK 
            KeyType: HASH
          - AttributeName: SK 
            KeyType: RANGE
        TableName: ${self:service}-claimTable-${sls:stage}

plugins:
  - serverless-offline
  - serverless-plugin-include-dependencies
  - serverless-dotenv-plugin
  - serverless-esbuild

custom:
  esbuild:
    bundle: true
    minify: true
    sourcemap: true
    exclude: 'aws-sdk'
    target: node14
    define:
      'require.resolve': undefined
    platform: node
    concurrency: 10
